<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
</head>

<body>
  <style>
    h2 {
        color: #404042;
    }
    .workspace {}

    .run-btn {
      display: block;
      float: right;
      margin-top: 10px;
      width: 150px;
      height: 35px;
      text-transform: uppercase;
      background: #003764;
      color: white;
      border: none;
      outline: none;
      font-weight: bold;
      border-radius: 5px;
    }

    .run-btn:hover {
      cursor: pointer;
    }

    .config-txt {
      display: block;
      min-width: 100%;
      min-height: 200px;
      border: 1px solid #bfbfbf;
      font-family: Arial,Helvetica Neue,Helvetica,sans-serif;
      border-radius: 3px;
    }

    .config-area {
      width: 100%;
      margin-bottom: 50px;
    }

    .widget {
      width: 100%;
    }
  </style>
  <div>
    <h2>{{widget_title}}</h2>

    <div class="workspace" id={{preview.workspaceId}}>
      <div class="config-area">
        <textarea id={{preview.textareaId}} class="config-txt"></textarea>
        <button class="run-btn" onclick="createWidget()">Run</button>
      </div>
      <div id={{preview.widgetId}} class="widget"></div>
    </div>
  </div>

  <script src={{preview.script}}></script>

  <script>
    function createWidget() {
      var config = JSON.parse(document.getElementById('{{preview.textareaId}}').value);
      document.querySelector("#{{preview.widgetId}}").parentNode.removeChild(document.querySelector("#{{preview.widgetId}}"));
      var divWrapper = document.createElement("DIV");
      var attClass = document.createAttribute("class");
      attClass.value = 'widget';
      var attId = document.createAttribute("id");
      attId.value = '{{preview.widgetId}}';
      divWrapper.setAttributeNode(attClass);
      divWrapper.setAttributeNode(attId);
      document.getElementById("{{preview.workspaceId}}").appendChild(divWrapper);

      localStorage.setItem('{{preview.textareaId}}', JSON.stringify(config));
      window.dtn['{{lib-name}}']['{{preview.function}}']({
        container: document.querySelector("#{{preview.widgetId}}"),
        {{#each preview.config as |value key|}}
          {{key}}: config.{{{key}}},
        {{/each}}
        theme: {
        },
        callbacks: {
        }
      });
    }

    function initWorkspace() {
      if (!localStorage.getItem('{{preview.textareaId}}')) {
        var defaultState = {
          {{#each preview.config as |value key|}}
            {{key}}: {{{value}}},
          {{/each}}
        }
        localStorage.setItem('{{preview.textareaId}}', JSON.stringify(defaultState));
      }
      document.getElementById('{{preview.textareaId}}').value = formatConfigString(localStorage.getItem('{{preview.textareaId}}'));
    }

    function formatConfigString(config) {
      var newline = String.fromCharCode(13, 10);
      var configObject = JSON.parse(config);
      var startingString = '{ /n';
      var endingString = '}';
      var contentString = '';

      Object.keys(configObject).forEach(function (key) {

        if (Array.isArray(configObject[key])) {
          contentString += ' "' + key + '": [ /n';

          for (var i = 0; i < configObject[key].length; i++) {
            contentString += ' { /n';
            Object.keys(configObject[key][i]).forEach(function (subkey) {
              var subkeyKey = typeof (configObject[key][i][subkey]) === "string" ? '"' + configObject[key][i][subkey] + '"' : configObject[key][i][subkey];
              contentString += '    "' + subkey + '": ' + subkeyKey + ', /n';
            });

            if (i < configObject[key].length - 1) {
              contentString += '}, /n';
            } else {
              contentString += '} /n';
            }

          }

          contentString += '], /n';
        }
        else if (typeof configObject[key] !== "object") {
          var configObjectKey = typeof (configObject[key]) === "string" ? '"' + configObject[key] + '"' : configObject[key];
          contentString += '    "' + key + '": ' + configObjectKey + ", /n";
        } else {
          contentString += ' "' + key + '": { /n';
          Object.keys(configObject[key]).forEach(function (subkey) {
            var subkeyKey = typeof (configObject[key][subkey]) === "string" ? '"' + configObject[key][subkey] + '"' : configObject[key][subkey];
            contentString += '    "' + subkey + '": ' + subkeyKey + ', /n';
          });
          contentString += '}, /n';
        }
      });


      var parsedConfig = startingString + contentString + endingString;
      return parsedConfig.replace(new RegExp(', /n}', 'g'), ' /n}').replace(new RegExp(' /n', 'g'), newline);
    }

    initWorkspace();
  </script>
</body>

</html>
